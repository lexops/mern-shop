name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"
 
on:
  push:
    branches:
    - feat/ci
    paths:
    - terraform/**
    ignore-paths:
    - terraform/modules/**
  pull_request:
    branches:
    - feat/ci
    paths:
    - terraform/**
    ignore-paths:
    - terraform/modules/**

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # The step below is a workaround for the fact that creating environments 
      # is only available for users with GitHub Pro.
      # https://docs.github.com/en/actions/managing-workflow-runs-and-deployments/managing-deployments/managing-environments-for-deployment#creating-an-environment

      - name: Set environment variables based on branch
        uses: kanga333/variable-mapper@master
        id: export-vars
        with:
          key: "${{ github.ref_name }}"
          export_to: env
          map: |
            {
              "main": {
                "AWS_ACCOUNT_ID": "${{ vars.PROD_AWS_ACCOUNT_ID }}",
                "AWS_REGION": "${{ vars.PROD_AWS_REGION }}",
                "GHA_ROLE_ARN": "${{ vars.PROD_GHA_ROLE_ARN }}",
              },
              ".*": {
                "AWS_ACCOUNT_ID": "${{ vars.DEV_AWS_ACCOUNT_ID }}",
                "AWS_REGION": "${{ vars.DEV_AWS_REGION }}",
                "GHA_ROLE_ARN": "${{ vars.DEV_GHA_ROLE_ARN }}",
              }
            }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.GHA_ROLE_ARN }}
  
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8
    
      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
    
      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
    
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false