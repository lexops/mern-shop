name: Backend CI
on:
  push:
    branches:
    - feat/ci
  workflow_dispatch: 

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # The step below is a workaround for the fact that creating environments 
      # is only available for users with GitHub Pro.
      # https://docs.github.com/en/actions/managing-workflow-runs-and-deployments/managing-deployments/managing-environments-for-deployment#creating-an-environment

      - name: Set environment variables based on branch
        uses: kanga333/variable-mapper@master
        id: export-vars
        with:
          key: "${{ github.ref_name }}"
          export_to: env
          map: |
            {
              "main": {
                "AWS_ACCOUNT_ID": "${{ vars.PROD_AWS_ACCOUNT_ID }}",
                "AWS_REGION": "${{ vars.PROD_AWS_REGION }}",
                "ECR_URL": "${{ vars.PROD_ECR_URL }}",
                "GHA_ROLE_ARN": "${{ vars.PROD_GHA_ROLE_ARN }}"
              },
              ".*": {
                "AWS_ACCOUNT_ID": "${{ vars.DEV_AWS_ACCOUNT_ID }}",
                "AWS_REGION": "${{ vars.DEV_AWS_REGION }}",
                "ECR_URL": "${{ vars.DEV_ECR_URL }}",
                "GHA_ROLE_ARN": "${{ vars.DEV_GHA_ROLE_ARN }}"
              }
            }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.GHA_ROLE_ARN }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.ECR_URL }}/mern-shop/backend:1.0.0
            ${{ env.ECR_URL }}/mern-shop/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
